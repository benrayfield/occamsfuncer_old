/(
	Occamsfuncer is a stateless/immutable system where no object can see outside itself but can workaround that by passing in pointer to itself or other things which are then childs of another object that can see them all, and execution proceeds by building more combos of objects that way and other times optimized by java stack, opencl, etc, which you can use such runtime generated code in debuggers (such as Eclipse or Netbeans) and it will look similar to the code it was generated from, but usually you just use it as funcer takes a funcer param and returns a funcer. For example, a funcer which returns a map (which is a funcer of key to value) containing an int[] for pixels (or double[] cast to ints, etc) and ;width key, and height is size of the int divided by width. TODO The kernel1f op will help with such parallel tasks, and theres other optimizations.

	Comments go in either '...' with string syntax or /() which doesnt allow unbalanced parens.
	Comments and #names are stored in separate maps.
	"abc def" or ;abc (single token only after ;) are strings and are of the function.
	/(a comment)f(3 "abc" 4#nameOfFour 5 nameOfFour)#aName
	f(? "plus" 3 4) returns 7.
	f(f(? "plus")#+ 3 f(+ 2 2)) returns 7. You normally #name the core ops the first time they're used.
	Since this is just a comment and they will be imported elsewhere, I wont import everything I use in explaining these basics,
	but you should look at the actual code to learn that.
	Even if someone else names them differently, they have the same id.
	'map'
	m(key val key val...) is a map.
	A map can have any object as key or value since keys are by 192 bit id that triggers lazyEval of the id, since most objects never get an id (which is by content, not stateful). That is only slow the first use of a key and after that the keys id is cached so you only pay for comparing 3 longs about log(map size) times (and creation of log objects if put, but no new objects if get) and pay for the overhead of objects in general.
	a(...) is an array or treelist whose leafs can be contents of arrays, or any object as a single item (even if its an array). This is for all primitive types and the Funcer type (general object) as 1d list. Even though the leaf datastruct supports 0-15 dimensional arrays of hyperrectangle (not triangle array for example) dims by multiformats_varint size per dimension (including the first dimension is number of bits of the scalar, unsignedInteger, signedInteger, generalText, semanticText(such as url or contentType or make up your own semantic), etc)
	'linked list'
	l(items in a linkedlist made of consPairs and ending with nil)
	's curry list'
	s(b c d) means s(s(b c) d) means f(s f(s b c) d) means f(f(s f(f(s b) c)) d).
	,xyz means f(k xyz).
	s(,+ s(,* ,3 identityFunc) ,4) is a function that returns 3*param+4.
	$5ab45456bab45456bab45456bab45456 ($ then 32 base64 digits) is a 192 bit id of any occamsfuncer object and can be in code instead of the expanded view of that branch. It has no effect other than the view and that (depending on the occamsfuncerVM) you might not have to load the object right away.
	Even though you can import f(? "ABC$$ac$bc")#s or f(? "ABC$$ac$bc")#theSLambda, that doesnt affect the s(...) syntax. The single chars that go before lparen exist before any f(? "import some func statelessly").
	
	(TODO S cant be sLinkedList cuz must be lowercase letter for any tree type such as treelistandorarray and treemap)
	m( ... M(...) ... ) or l( L(...) L( L(...) L(...))  ) where the capital letters are internal nodes of those treemaps/treelists/etc, which you can write as just m(...) and l(...) with or without, or with only some parts, of the inner nodes.
	
	UPDATE THERES ONLY 1 AND 2 DIMENSIONAL ARRAYS, 1 BEING JUST A PRIMITIVE OR ID AS AN ARRAY OF BITS, AND 2 BEING AN ARRAY OF THOSE. MUST STORE SIZE INFO SOMEWHERE ELSE, CUZ ITS TOO HARD TO OPTIMIZE MORE DIMS:
	/(
		FIXME do I want getdeep and putdeep ops so can have 0-15 dimensional arrays instead of having to be 1d used as more-d?
		a(where do the sizes go? ...)
		ndim datastruct? Since all code would be occamsfuncer, instead of including strings of java code in occamsfuncer, its not a problem for Humans to see it as ndim instead of 1d, like it was a problem in java code such as x.v[x.o+x.m[0]*i+x.m[1]*j] or more efficiently to add x.m[0] and x.m[1] to an offset var in a double loop, or however deep of loops you have up to 15 dims.
	)
	
	TODO IS THIS CONSISTENT DESIGN? I WANT IT FOR GETDEEP AND PUTDEEP OPS:[
		's linked list. FIXME choose some lowercase letter cuz capitals mean internal node.'
		S(b c d) means 'TODO finish this example' some structure of s(...) that generates a linkedlist of what these 3 return f(b param) f(c param) f(d param) when called on the param of S(b c d).
		Example: s(,put )
	]
	
)
f(
	f(? "ignoredataFuncParam")#igfp
	l(
		f(? "plus")#+
		f(? "multiply")#*
		f(? "negate")#-
		f(? "ABC$$ac$bc")#s
		f(? "ABa")#k
		f(? "ABC$$cab")#cons
	)
	/(
		TODO recurrentNeuralNet (rnn) code goes here, takes a map containing rnn, input, etc, and returns the next state of that map.
		This is not a lstm. I'll do that later. This is rnn as a proofOfConcept of occamsfuncer since its never done anything that advanced and I need to work out the details of optimizations as in occamsfuncerDesign2019-4-14.
		First, I should choose an example of such a map and write it here...
		m(
			;sizeNodes
			200
			'1d array used as 2d, ;sizeNodes by ;sizeNodes'
			;weights
			a(...)
			'1d array used as 2d, ;sizeInputs by ;sizeNodes'
			;inputs
			a(...)
		)
	)
	s(
		TODO
	)
)